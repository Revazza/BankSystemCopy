// <auto-generated />
using System;
using BankSystem.Common.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankSystem.Common.Migrations
{
    [DbContext(typeof(BankSystemDbContext))]
    [Migration("20230327141936_TransactionsSeederAdded")]
    partial class TransactionsSeederAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankSystem.Common.Db.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ffae49b-5579-4560-bf20-fd3986fd76c0"),
                            Amount = 14318m,
                            Currency = 0,
                            Iban = "Ana's Iban",
                            UserId = new Guid("4bf7d82a-fca9-4d1d-bbc9-48cfaa109187")
                        },
                        new
                        {
                            Id = new Guid("7b1902d5-c240-49f4-b91f-454d9e19d402"),
                            Amount = 17924m,
                            Currency = 0,
                            Iban = "Sandro's Iban",
                            UserId = new Guid("0eb288d0-c7cd-4749-ad29-92a9d59e8bf4")
                        });
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62e5f726-6070-4326-9a25-c27c6216e35f"),
                            AccountId = new Guid("1ffae49b-5579-4560-bf20-fd3986fd76c0"),
                            CardNumber = "601912989918641835",
                            CreatedAt = new DateTime(2023, 3, 27, 18, 19, 36, 316, DateTimeKind.Local).AddTicks(6778),
                            Cvv = "931",
                            ExpiresAt = new DateTime(2028, 3, 27, 18, 19, 36, 316, DateTimeKind.Local).AddTicks(6771),
                            FullName = "Ana Mklavashvili",
                            Pin = "1234"
                        },
                        new
                        {
                            Id = new Guid("d38dc493-fb60-4d75-8930-48dee7dc3f97"),
                            AccountId = new Guid("7b1902d5-c240-49f4-b91f-454d9e19d402"),
                            CardNumber = "784506287657360615",
                            CreatedAt = new DateTime(2023, 3, 27, 18, 19, 36, 316, DateTimeKind.Local).AddTicks(6786),
                            Cvv = "931",
                            ExpiresAt = new DateTime(2028, 3, 27, 18, 19, 36, 316, DateTimeKind.Local).AddTicks(6785),
                            FullName = "Sandro Revazishvili",
                            Pin = "1234"
                        });
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.CurrencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Diff")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("DiffFormated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("RateFormated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.EmailRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailRequests");
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyFrom")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyTo")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7e1c126-5b4a-4e8b-8b25-b61faaeef7f9"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 567.20m,
                            CreatedAt = new DateTime(2023, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 1,
                            CurrencyTo = 2,
                            Fee = 29.80m,
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("a14ea9f9-873a-4a6b-a38f-27a72d7a4892"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 438.10m,
                            CreatedAt = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 2,
                            CurrencyTo = 0,
                            Fee = 18.50m,
                            TransactionType = 2
                        },
                        new
                        {
                            Id = new Guid("93ccfacd-7ce0-4261-a177-d063d1c263c3"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 789.40m,
                            CreatedAt = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 0,
                            CurrencyTo = 1,
                            Fee = 33.20m,
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("35ad3cea-118f-4d35-bcc9-81a46d3c523a"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 312.70m,
                            CreatedAt = new DateTime(2022, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 1,
                            CurrencyTo = 2,
                            Fee = 16.20m,
                            TransactionType = 2
                        },
                        new
                        {
                            Id = new Guid("aa460937-2d7a-431a-8251-ec3068c323a3"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 195.50m,
                            CreatedAt = new DateTime(2022, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 0,
                            CurrencyTo = 1,
                            Fee = 9.80m,
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("79684d49-15eb-49d5-8ae2-764cf008fa71"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 489.80m,
                            CreatedAt = new DateTime(2022, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 2,
                            CurrencyTo = 0,
                            Fee = 22.40m,
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("e9ddce10-c2a5-4aad-924a-3725ec46a89f"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 637.90m,
                            CreatedAt = new DateTime(2022, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 1,
                            CurrencyTo = 0,
                            Fee = 31.50m,
                            TransactionType = 2
                        },
                        new
                        {
                            Id = new Guid("1b8edb87-782f-4acd-85f7-21638fadf963"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 573.40m,
                            CreatedAt = new DateTime(2022, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 0,
                            CurrencyTo = 1,
                            Fee = 27.80m,
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("451b33be-e3de-4c63-84d5-dd7c9f5f133a"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Amount = 242.10m,
                            CreatedAt = new DateTime(2022, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyFrom = 2,
                            CurrencyTo = 0,
                            Fee = 23.12m,
                            TransactionType = 0
                        });
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bf7d82a-fca9-4d1d-bbc9-48cfaa109187"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2013, 3, 27, 18, 19, 36, 315, DateTimeKind.Local).AddTicks(2102),
                            ConcurrencyStamp = "ff1e264b-e6d1-4983-b4b7-f305ecaf7a54",
                            Email = "anamklavashvili@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ana",
                            LastName = "Mklavashvili",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANAMKLAVASHVILI@GMAIL.COM",
                            PasswordHash = "AARGy2attN7V3kfnZnj562Jt7H4DGuvzFEsP5lGP9joOV//NbarWPZCE8T56rC3rKQ==",
                            PersonalNumber = "674584629",
                            PhoneNumberConfirmed = false,
                            RegisteredAt = new DateTime(2023, 3, 27, 18, 19, 36, 315, DateTimeKind.Local).AddTicks(2115),
                            SecurityStamp = "6819cdab-a4b6-4b56-a34a-25fbaf1989ad",
                            TwoFactorEnabled = false,
                            UserName = "ana"
                        },
                        new
                        {
                            Id = new Guid("0eb288d0-c7cd-4749-ad29-92a9d59e8bf4"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2013, 3, 27, 18, 19, 36, 315, DateTimeKind.Local).AddTicks(9233),
                            ConcurrencyStamp = "e09fba1b-f60c-4c34-9bfa-5297d6db9c61",
                            Email = "sandro.revazishviliii@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sandro",
                            LastName = "Revazishvili",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDRO.REVAZISHVILIII@GMAIL.COM",
                            PasswordHash = "AMIdasCnqn6y6rfwCUB2RpPHeuQv6eAPnEcDJgsLtX//sr2Az9Nf6X1MbgdAQ2z6CQ==",
                            PersonalNumber = "442728524",
                            PhoneNumberConfirmed = false,
                            RegisteredAt = new DateTime(2023, 3, 27, 18, 19, 36, 315, DateTimeKind.Local).AddTicks(9238),
                            SecurityStamp = "7e00a07f-da75-4c2b-9006-fd1c5fa04673",
                            TwoFactorEnabled = false,
                            UserName = "sandro"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5c38744-072b-4785-9c6d-db48ac043b7f"),
                            Name = "api-user",
                            NormalizedName = "API-USER"
                        },
                        new
                        {
                            Id = new Guid("3f66ed5d-b94b-46a7-a9c3-9a564241708f"),
                            Name = "api-operator",
                            NormalizedName = "API-OPERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4bf7d82a-fca9-4d1d-bbc9-48cfaa109187"),
                            RoleId = new Guid("3f66ed5d-b94b-46a7-a9c3-9a564241708f")
                        },
                        new
                        {
                            UserId = new Guid("0eb288d0-c7cd-4749-ad29-92a9d59e8bf4"),
                            RoleId = new Guid("f5c38744-072b-4785-9c6d-db48ac043b7f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.AccountEntity", b =>
                {
                    b.HasOne("BankSystem.Common.Db.Entities.UserEntity", "UserEntity")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.CardEntity", b =>
                {
                    b.HasOne("BankSystem.Common.Db.Entities.AccountEntity", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BankSystem.Common.Db.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BankSystem.Common.Db.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankSystem.Common.Db.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BankSystem.Common.Db.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.AccountEntity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("BankSystem.Common.Db.Entities.UserEntity", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
